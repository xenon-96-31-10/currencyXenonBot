<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;
use App\Models\Subscribe;
use App\Models\Log;
use App\Models\Currency;
use Carbon\Carbon;

use BotMan\BotMan\BotMan;
use BotMan\BotMan\BotManFactory;
use BotMan\BotMan\Drivers\DriverManager;
use BotMan\BotMan\Cache\LaravelCache;
use BotMan\BotMan\Messages\Incoming\Answer;
use BotMan\BotMan\Messages\Outgoing\Question;
use BotMan\BotMan\Messages\Outgoing\Actions\Button;
use BotMan\BotMan\Messages\Conversations\Conversation;
use App\Conversations\LogConversation;
use BotMan\Drivers\Telegram\Extensions\Keyboard;
use BotMan\Drivers\Telegram\Extensions\KeyboardButton;

class BotManController extends Controller
{
  public function handle(){

    $config = [
        // Your driver-specific configuration
        "telegram" => [
           "token" => \\API_TOKEN
        ],
        'user_cache_time' => 30000 ,
        'talk_cache_time' => 30000 ,
    ];

    // Load the driver(s) you want to use
    DriverManager::loadDriver(\BotMan\Drivers\Telegram\TelegramDriver::class);

    // Create an instance
    $botman = BotManFactory::create($config, new LaravelCache());

    // Give the bot something to listen for.
    $botman->hears('/start', function (BotMan $bot) {
      $bot->typesAndWaits(1);
      $chat_id = $bot->getUser()->getId();
      $name = $bot->getUser()->getFirstName();
      $bot->reply('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –∫ –Ω–∞–º, '.$name.'! –ü—Ä–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –∏ –Ω–∞—á–∏–Ω–∞–π—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è.üçÄ');

      if(Subscribe::where('chat_id', $chat_id)->first() === null){
        $user = new Subscribe();
        $user->chat_id = $chat_id;
        $user->name = $name;
        $user->subscribe = 0;
        $user->save();
      }

    });

    $botman->hears('/menu', function (BotMan $bot) {
      $this->showMainMenu($bot);
    });

    $botman->hears('–ö—É—Ä—Å –¥–æ–ª–ª–∞—Ä–∞ üíµ|/usdrate', function (BotMan $bot) {
        $bot->typesAndWaits(1);
        $chat_id = $bot->getUser()->getId();
        $name = $bot->getUser()->getFirstName();
        $chat = Subscribe::where('chat_id', $chat_id)->first();


        $usd = Currency::where('name', 'USD')->first();
        $value = $usd->value;
        $update = $usd->updated_at->format('d.m.Y');

        $log = new Log();
        $log->value = $value;
        $log->chat()->associate($chat)->save();

        $bot->reply('–ö—É—Ä—Å –¥–æ–ª–∞—Ä–∞ —Ä–∞–≤–µ–Ω '.$value.' —Ä. –î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–∏–ª–∏—Å—å: '.$update.' –î–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –±–µ—Ä—É—Ç—å—Å—è —Å –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–≥–æ –∞–ø–∏ –¶–ë –†–§ü§û');
    });

    $botman->hears('–ò—Å—Ç–æ—Ä–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤|/log', function($bot) {
     $bot->startConversation(new LogConversation());
    })->stopsConversation();

    $botman->hears('–£–¥–∞–ª–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é|/deletelog', function($bot) {
      $bot->typesAndWaits(1);
      $chat = Subscribe::where('chat_id', $bot->getUser()->getId())->first();
      $chat->log()->delete();
      $bot->reply('–ò—Å—Ç–æ—Ä–∏—è —É–¥–∞–ª–µ–Ω–∞!');
    });

    $botman->hears('–û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É|/subscribe', function (BotMan $bot) {
        $bot->typesAndWaits(1);
        $user = Subscribe::updateOrCreate(['chat_id' => $bot->getUser()->getId()], ['subscribe' => 1, 'name' => $bot->getUser()->getFirstName()]);
        $bot->reply('–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, '.$user->name.'! –í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ –∫—É—Ä—Å–∞ –¥–æ–ª–ª–∞—Ä–∞ –≤ 13-00 –ø–æ –ú–æ—Å–∫–≤–µ.üçÄ');
    });

    $botman->hears('–û—Ç–º–µ–Ω–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É|/unsubscribe', function (BotMan $bot) {
        $bot->typesAndWaits(1);
        $user = Subscribe::updateOrCreate(['chat_id' => $bot->getUser()->getId()], ['subscribe' => 0, 'name' => $bot->getUser()->getFirstName()]);
        $bot->reply('–ú—ã —É—Å–ø–µ—à–Ω–æ –í–∞—Å –æ—Ç–ø–∏—Å–∞–ª–∏, '.$user->name.'! –ë—É–¥–µ–º –∂–¥–∞—Ç—å –í–∞—à–µ–π –ø–æ–¥–ø–∏—Å–∫–∏ —Å–Ω–æ–≤–∞!üçÄ');
    });

    $botman->hears('–ù–æ–º–µ—Ä —á–∞—Ç–∞', function (BotMan $bot) {
        $bot->typesAndWaits(1);
        $bot->reply($bot->getUser()->getId());
    });

    // Start listening
    $botman->listen();

  }

  public function showMainMenu($bot){
    $keyboard = Keyboard::create()
        ->type(Keyboard::TYPE_KEYBOARD)
        ->addRow(KeyboardButton::create('–û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É')->callbackData('–û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É'),
                 KeyboardButton::create('–û—Ç–º–µ–Ω–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É')->callbackData('–û—Ç–º–µ–Ω–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É'))
        ->addRow(KeyboardButton::create('–ö—É—Ä—Å –¥–æ–ª–ª–∞—Ä–∞ üíµ')->callbackData('–ö—É—Ä—Å –¥–æ–ª–ª–∞—Ä–∞ üíµ'),
                 KeyboardButton::create('–ò—Å—Ç–æ—Ä–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤')->callbackData('–ò—Å—Ç–æ—Ä–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤'),
                 KeyboardButton::create('–£–¥–∞–ª–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é')->callbackData('–£–¥–∞–ª–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é'))
        ->toArray();
      $bot->ask('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ', function (Answer $answer) {
        // some stuff
      }, $keyboard);
  }

}
